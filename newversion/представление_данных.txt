# Функции

Все функции обладают понятными именами, состоящими из:
ключевого слова, определяющего, что это функция,
название элемента или подэлемента сайта, или условную группу операций, определяющих ее отношение
название самой функции

> funcElementSubelement_Name

Примеры:
funcData_Parse
funcModuleForm_Generated

# Переменные

Есть только небольшое число разрешенных переменных:

группа ключей: $key $subkey $subsubkey $sub...key => $k $sk $ssk $s...k
группа элементов: $item $subitem $subsubitem $sub...item => $i $si $ssi $s...i
группа наименований: $object $array => $obj $arr
группа данных: $data

Все прочие переменные обладают именами, состоящими из:
ключевого слова, определяющего, что это переменная
ее отношение
ее название

> vElementName

В переменных разрешено отношение по текущей привязке, т.е. This или без привязки:

> vThisName
> vName

Примеры:
vDataString
vThisTarget
vTarget

# Массивы и объекты

Это те же переменные, строятся по тем же правилам, только ключевым словом является arr

> arrElementName
> arrThisName
> arrName

Примеры:
arrDataString
arrThisTarget
arrTarget

# Глобальные системные объекты

Их немного, все они стандартизированы, запись в них, как и их замена, может привести к ошибкам в работе системы.

Для пользователя они представляют собой источник данных.

$lang
$dictionary
$template
$router
$module
$query
$system
$uri

Вызов полей из системных объектов имеет вид:

	$object -> field
	$object -> field -> subfield

Для операций с системными объектами, например перебор как массива, объединение, используются функции, большинство из которых рекурсивные, т.е. перебирают объект любой глубины.

# Системные константы

Это константы, зарезервированные системой. В большинстве случаев, они используются в качестве триггеров. Эти константы начинаются на прописное 'is', далее идет именование заглавными буквами.

Использование прописных букв допускается интерпретатором php, и хотя не соответствует принятым стандартам именования, ошибкой не является.

Мы используем эту возможность, чтобы отличить системные триггеры состояний. Однако, помимо них, система использует еще множество констант, которые именованы уже как обычно.

isCMS
Условный триггер запуска системы. Вызывать его проверку рекомендуется в начале каждого файла "php", чтобы исключить возможность запуска этих файлов отдельно от системы:

	defined('isCMS') or die

И хотя без такой проверки система будет работать, и она не является обязательной, это просто дополнительная мера безопасности.
Помимо всего перечисленного, эта константа также хранит текущую версию системы.

isADMIN
Это триггер, определяющий, что пользователю разрешен доступ в админку. Он не только запросил админку, но и успешно прошел идентификацию администратора. Опираться на значение этого триггера можно и нужно.
Однако !isADMIN не означает плохой запрос, а только лишь то, что доступ в админку не разрешен. При этом можно, например, выводить окно идентификации.

isALLOW
Триггер, определяющий, что пользователь успешно прошел идентификацию. Опираться на значение этого триггера можно и нужно.
Для его безопасности использовано свойство констант - определяться только один раз. Так, его значение задается всего лишь один раз в коде. Если же на тот момент его значение уже было определено, это вызовет системную ошибку.

isERROR
Константа, хранящая код ошибки. Используется для вызова шаблона ошибки, в том числе через функцию error.

isORIGIN
Триггер, который объявляется при проверке источника запроса. Если он положительный, то значит, что запрос поступил от системы. Если же он отрицательный, это значит, что запрос поступил откуда-то извне.

isQUERY
Триггер, который открывается при поступлении запроса в систему. Он также как и isADMIN не удостоверяет в том, что запрос хороший - этот запрос еще должен пройти различные проверки.
Однако использование этого триггера возможно вместо isCMS для ограничения доступа к страницам обработки запроса.
Подобная мера служит для обеспечения некоторой безопасности, т.к. запросы получают доступ к системе, базе данных, имеют разрешение на запись. Этого не должно происходить со стороны.

isREAD
Запись в базу данных разрешается триггером isWRITE только на время выполнения определенного процесса. Когда же процесс завершается, разрешение на запись остается. И это может стать серьезной проблемой для безопасности. Поэтому по окончании процесса требуется вновь изменить права доступа к базе данных только на чтение. В этой роли и выступает данный триггер.
Этот триггер запрещает запись даже с установленным isWRITE и isSYSTEM. Он имеет высший приоритет и фактически отменяет и isWRITE, и isSYSTEM.
При проверках нужно использовать не только его значение, но также и его существование, т.к. на момент проверки он может быть еще не задан.

isREQUEST
Вместе с предыдущим, показывает разрешенный это запрос или нет. Разрешения на запросы устанавливаются в конфигурации системы.
Только сочетание триггеров isREQUEST и isORIGIN могут дать полные основания для принятия и отклонения запроса.
Например, это может быть запрещенный POST-запрос, но он поступил от системы и в таком случае у системы нет оснований для запрета.

isSYSTEM
Обозначает системный процесс. Используется для установки разрешения на запись в базу данных, даже когда пользователь не имеет данных прав.
При проверках нужно использовать не только его значение, но также и его существование, т.к. на момент проверки он может быть еще не задан.

isWRITE
Будьте аккуратны! Этот триггер разрешает запросы в базу данных на запись и удаление. Однако он работает только со стандартной функцией dbUse и никак не влияет на прямые запросы в базу данных.
Чтобы исключить возможность прямой записи в базу данных, используйте двух пользователей с разными правами. Подробнее смотрите константы SECURE_WRITING, DB_WRITINGUSER, DB_WRITINGPASS.
Этот триггер опирается на значения isADMIN, isALLOW, isSYSTEM, isQUERY, SECURE_WRITING. При проверках нужно использовать не только его значение, но также и его существование, т.к. на момент проверки он может быть еще не задан. Кроме него имеет смысл также проверять триггер isREAD, т.к. он повторно переключает базу данных и запрещает запись даже с установленным isWRITE.

# Прочие константы

Есть несколько констант, которые задаются в самом начале.
Кроме isCMS, PATH_SITE и PATH_BASE, которые относятся к другим группам, это:

	CMS_MINIMUM_PHP - минимальная версия php, при которой работает наша система
	DS - просто короткий синоним константы DIRECTORY_SEPARATOR из php, которая определяет слеш для файловой системы

Большинство констант задается через файл конфигурации:

	DEFAULT_SCHEME - схема по-умолчанию, 'http', 'https' или пусто, если задана сайт будет стараться загрузиться именно в этой схеме
	DEFAULT_HOST - настройки хоста по-умолчанию, 'www' или пусто, сайт будет стараться загрузиться именно с этим хостом

	Обе эти настройки вызывают внутренние правила редиректа. Такой редирект может и дольше, чем редирект на стороне сервера, но он не требует дополнительных настроек сервера, а сам алгоритм может совершенствоваться и гибко изменяться под различные нововведения

	DEFAULT_ADMIN - путь к папке администратора, на самом деле физически никакой папки нет, это просто название точки входа, если оставить пустой, то админка фактически будет запрещена на сайте
	DEFAULT_PROCESSOR - путь для процессора, по аналогии DEFAULT_ADMIN, это название точки входа для обработки системой процессов, если оставить пустой, то процессор фактически будет неактивен на сайте
	DEFAULT_EMAIL - адрес электронной почты, очень часто в небольших сайтах используется только одна почта, либо есть почта системного администратора так вот, если что система использует заданный здесь адрес
	DEFAULT_LANG - язык сайта по-умолчанию, может также иметь пустое значение, тогда будет взят первый или единственный язык, найденный в системе, или 'auto', если вы хотите, чтобы язык в системе был один и подставлялся автоматически из настроек вашего браузера или профиля
	DEFAULT_USERS - включает поддержку пользователей на сайте
	DEFAULT_RIGHTS - задает права пользователей по-умолчанию (true - доступ разрешен, false - доступ запрещен), работает в том случае, если SECURE_RIGHTS = true и права пользователя для доступа к определенной базе данных не заданы
	DEFAULT_CUSTOM - включает поддержку кастомного ядра (в папке custom есть набор файлов и папок, которые будут подключаться в разных случаях, таким образом можно дополнить стандартный функционал ядра системы своими собственными проверками, расширениями, классами, функциями и пр., которые не будут затронуты при обновлении ядра системы)
	DEFAULT_MODE - режим работы сайта, предполагается 'develop' для разработчика и 'production' или пустой - по-умолчанию, еще возможно будет режим для простого сайта, с одним шаблоном и без роутинга

	ROOT_USER - используется при авторизации
	ROOT_PASSWORD - используется при авторизации

	Обе эти настройки можно назначить, если утерян доступ к управлению сайтом, иначе их лучше оставить пустыми. Имя должно быть уникальным, не повторять ни одно из имеющихся в базе данных. Пароль должен быть хэшем, сгенерированным с помощью функции password_hash.
	Например, для простого пароля '123456' хэш будет таким '$2y$10$BI0X6u.4dYSkobhrLhBEzeO55zO1ST8IQmWBEhYvTG.IZTvFn6JWO'
	Для сложного пароля, например 'c3~sfq0?o%EY' хэш будет таким '$2y$10$.rfhm2ehNQlKWXoOFfE/8eD21.AAQDaXN93dHOKLFwvIWI.AH1fVG'

	SECURE_REQUEST - разрешенные запросы, 'get', 'post', 'both', 'all' или 'disable', если ни один запрос не считается разрешенным, причем 'both' разрешает и get, и post-запросы, а 'all' разрешает любые запросы вообще
	SECURE_MODE - пока не используется, режим работы системы, предполагается 'high' как высокий, 'paranoid' как параноидальный, 'low' без лишних проверок, 'ddos' и пустой - по-умолчанию
	SECURE_BLOCKIP - блокировка пользователей по ip, 'blacklist', 'whitelist'
	SECURE_LOG - режим записи логов
	* 'warning' - предупреждающий, например о плохих ошибках или опасных запросах
	* 'panic' - панический, параноидальный или высокий, когда записываются все логи с подробной раскладкой, нужен для отлавливания ошибок, но крайне не рекомендуется в обычном режиме из-за большой нагрузки на файловую систему
	* впоследствии возможно будет удален, а режимы перенесутся на константу DEFAULT_MODE
	SECURE_SORTLOG - сортировка логов по папкам, 'ip', 'agent' - данные сервера, 'memory' - максимальный объем памяти, 'request', 'origin', 'admin' - константы, 'speed' - скорость загрузки, 'time', 'minute', 'hour', 'day', 'week', 'month' - временной промежуток, любое другое значение - папка с этим названием
	SECURE_USERS - более глубокая проверка пользователей, нужна для сайтов, на которых есть регистрация/авторизация, true если включена
	SECURE_RIGHTS - включает проверку прав пользователей при запросах в базу данных
	SECURE_SESSIONTIME - время жизни сессии в секундах, если задано то по нему будут определятся старые запросы
	SECURE_QUERYTIME - время жизни запроса в секундах, если задано то по нему будут определятся старые запросы
	SECURE_CSRF - включает механизм защиты от CSRF-атак, кроме true (включен) и false (выключен) есть несколько предустановленных режимов: header - по заголовку, cookie - через куки, uid - с идентификатором пользователя
	* работает только со включенными пользователями
	SECURE_WRITING - ограничивает запись в базу данных путем авторизации пользователей с разными правами, true если включена
	* на самом деле, логически запись в базу данных ограничивается через константу isWRITE, а физически - через двух пользователей с разными правами - только на чтение и на чтение/запись
	* если у вас для работы с базой данных используется только один пользователь, включение этой функции приведет к ошибкам

	Эти настройки влияют на безопасность системы

	DB_TYPE - тип базы данных, в основном определяет драйвер для работы и некоторые правила, может иметь значения 'mysqli', 'mysqli-test' (с настройками для localhost), 'pdo' и 'nodb' или пустое значение для обращения к файлам
	DB_HOST, DB_NAME, DB_PREFIX, DB_PORT, DB_USER, DB_PASS - настройки подключения к базе данных (для 'nodb' и пустого значения не учитываются, для 'mysqli-test' учитывается только поле DB_NAME)
	DB_WRITINGUSER, DB_WRITINGPASS - пользователь с правами на запись в базу данных, работает только при включенной SECURE_WRITING

	PATH_SITE - путь к корневой папке сайта в файловой системе
	PATH_BASE - путь до корневой папки в файловой системе, может быть использован, если вы хотите хранить некоторые данные снаружи и обращаться к ним

	NAME_FOLDER, PATH_FOLDER, URL_FOLDER - группа констант, задающих имена и пути к системным папкам

Есть еще константы времени, числовые значения в секундах:

	TIME_MINUTE, TIME_HOUR, TIME_DAY, TIME_WEEK, TIME_MONTH, TIME_YEAR

# Области видимости

глобальной областью видимости для системы является

> /is/

Существует системная область

> /is/system/

В ней расположены глобальные системные объекты

$template
$router
$system
$query
$lang
$dictionary
$url

Есть также область видимости модулей, в которой работают модули

> /is/modules/

Еще одна область видимости - для контента, где расположены статьи, список статей или текущая статья

> /is/content/

Еще есть защищенная, скрытая область видимости, которая предназначена для хранения защищенных данных

> /is/secure/

И последняя область видимости - для администраторов, модераторов и прочих управляющих сайтом

> /is/administrator/

Системные константы не располагаются в какой-либо из этих областей видимости - они находятся в глобальной области видимости интерпретатора php и могут быть вызваны из любого места.

# Формат данных

Все данные хранятся в формате json, незначительно доработанном и специализированном системой.

Отличия:

разрешены отступы строк в виде пробелов и табуляций
разрешены переносы строк '\r', '\n' и '\r\n'
разрешены комментарии вида '//' до конца строки
разрешены комментарии вида '/*...*/'

Внутри данных возможно разбиение на атрибуты через двоеточие.

> "group:subgroup:item"

Такие данные будут разобраны и представлены в виде:

{ "group" : [ "subgroup", "item" ] }

Возможно перечисление через запятые, точки с запятыми и пробелы:

> "group:subgroup1:subgroup2,item:subitem1:subitem2"
> "group:subgroup1:subgroup2;item:subitem1:subitem2"
> "group:subgroup1:subgroup2 item:subitem1:subitem2"

Такие данные будут разобраны и представлены в виде:

{ "group" : [ "subgroup1", "subgroup2" ], "item" : [ "subitem1", "subitem2" ] }

Такое представление данных является понятным для пользователя и весьма удобным, например, для передачи атрибутов и аргументов.

Также формат данных поддерживает текстовые переменные, вызов которых осуществляется через фигурные скобки:

> {name:attribute1:attribute2:...}

Поддерживается ограниченное число текстовых переменных. На данный момент это:

link - для вывода ссылки
lang - для вызова языковой переменной
module - для вывода модуля в контенте
page - для вызова страницы в контенте

Дело в том, что по-умолчанию ссылки через тег <a> в контенте запрещены в целях безопасности и единственной возможностью
вывода ссылок в контенте является их вызов через текстовую переменную

Планируется также ввести переменные:

router - для получения данных страницы
content - для управления контентом
date - для вывода даты

Еще было бы неплохо сделать вывод через общую функцию, которая может выводить данные переменных, форматировать их (дата, телефон)
и использовать ее как прослойку для редактирования сайта через фронтэнд

# Форматы файлов

Разрешенных форматов файлов всего два:

- php для страниц
- ini для данных

Все страницы, включая системные и страницы шаблонов, используют расширение php.

Все файлы данных имеют расширение ini.

# Формат базы данных - новый

Существует два типа базы данных:

	локальная
	удаленная

Локальная база данных представлена папками и файлами с расширением ini, в которых записаны данные в формате json.

Все данные, которые хранятся в файлах формата ini, соответствуют данным в базе данных и могут быть перенесены из одного типа в другой.

База данных, грубо говоря, делится на разделы трех типов.

1. Настройки сайта
2. Общие данные
3. Контент

Настройки сайта представлены 8-ю колонками:

	id | name | type | parent | ctime | mtime | rights | data
	id | name | data

	id - необязательно для файла, но обязательно для таблицы
	name - соответствует имени файла с расширением ini
	type - тип данных, для поиска и фильтрации определенных данных внутри одного раздела
	parent - родитель, к какому семейству относится эта запись, в случае локальной базы данных, это - название родительской папки
	ctime - время создания записи
	mtime - время последнего изменения записи
	rights - права, в основном это поле содержит идентификаторы пользователей, которые являются авторами или последними, кто вносил изменения
	data - данные в формате json

Настройки сайта находятся в корне папки локальной базы данных. Название файла соответствует названию раздела, ключи главных массивов - названиям записей, а их содержимое - данным.

	[db/file.ini]
	{
		"one" : ...
	}
	
	[db: file]
	id | name | data
	0    one    ...

К настройкам сайта относятся следующие файлы:

	langcodes.ini
	functions.ini
	processor.ini
	userstable.ini

Общие данные также представлены тремя колонками.

Общие данные собраны в разделы, соответствующие названиям папок, а записи представлены файлами.

	[db/folder/id.file.ini]
	{
		...
	}
	
	[db: folder]
	id | name | data
	0    file   ...

Для хранения данных используется несколько типов.

Вызов как настроек сайта, так и общих данных осуществляется через функцию

	dbSelect($db, $name)
	db - название раздела базы данных (а также папки или файла для локальной версии)
	name - название нужной строки

На выходе функция возвращает массив. Если пропустить второй параметр, то будут прочитаны все строки.











Структура сайта - это раздел с общими данными.

Если имя файла содержит точку, то все, что до этой точки, воспринимается как id:




# Формат базы данных

Все данные, которые хранятся в файлах формата ini, могут быть перенесены в базу данных.

Все данные, которые лежат в административной папке, имеют свой раздел в бд по названию и свою структуру:

> administrator/name.ini => db/name

пример файла:

	[administrator/structure.ini]
	{
		"home",
		"about" : {
			"news|article",
			"faq|article",
			"conditions|url" : "/documents/conditions/"
		},
		"documents" : {
			"conditions",
			"privacypolicy",
			"useragreement"
		},
		"contacts"
	}

пример раздела бд:

	[db/structure]
	id | name        | parent  | type  | data
	----------------------------------------------------------
	0   home          null      null    null
	1   about         null      null    null
	2   news          about     article null
	3   faq           about     article null
	4   conditions    about     url     /documents/conditions/
	5   documents     null      null    null
	6   conditions    documents null    null
	7   privacypolicy documents null    null
	8   useragreement documents null    null
	9   contacts      null      null    null

Все остальные файлы имеют разделы, согласно папкам, в которых они лежат и простую структуру в формате json:

> folder/subfolder/name.ini => db/folder

пример файла:

	[templates/default/settings.ini]
	{
		"libraries" : [
			"jquery"
	...

пример раздела бд:

	[db/templates]
	id | name   | parent | type | data
	------------------------------------------------------
	0   settings default  null   {"libraries":["jquery"...

пример файла:

	[modules/articles/data/news.ini]
	{
		"page" : {
			"topdate" : 
	...

пример раздела бд:

	[db/modules]
	id | name   | parent | type | data
	----------------------------------------------------
	0   news     articles data   {"page":{"topdate":"...

пример файла:

	[languages/ru.common.ini]
	{
		"morph" : {
			"declension" : 
	...

пример раздела бд:

	[db/languages]
	id | name   | parent | type | data
	-------------------------------------------------------
	0   ru       null     common {"morph":{"declension":...







ПАПКА administrator - разбирается по особым условиям:
	[administrator/name.ini]
	[db/name]
	id | name        | parent  | type  | data
	-----------------------------------------
	... ...           ...       ...     ...

ОДИН уровень вложенности:

	[folder/name.ini]
	[db/folder]
	id | name   | parent | type | data
	----------------------------------
	0   name     null     null   ...

ДВА уровня вложенности:

	[folder/parent/name.ini]
	[db/folder]
	id | name   | parent | type | data
	----------------------------------
	0   name     parent   ...    ...
	
	[templates/default/settings.ini]
	[db/templates]
	id | name   | parent | type | data
	----------------------------------
	0   settings default  ...    ...

ТРИ уровня вложенности:

	[folder/parent/type/name.ini]
	[db/folder]
	id | name   | parent | type | data
	----------------------------------
	0   name     parent   type   ...

	[modules/articles/data/name.ini]
	[db/modules]
	id | name   | parent | type | data
	----------------------------------
	0   name     articles data   ...

	[folder/name/type/parent.ini]
	[db/folder]
	id | name   | parent | type | data
	----------------------------------
	0   name     parent   type   ...

ДВОЙНОЕ ИМЯ ФАЙЛА - назначает тип и не зависит от уровней вложенности:

	[folder/name.type.ini]
	[db/folder]
	id | name   | parent | type | data
	----------------------------------
	0   name     null     type   ...

	[folder/parent/name.type.ini]
	[db/folder]
	id | name   | parent | type | data
	----------------------------------
	0   name     parent   type   ...

	[folder/parent/another/news.type.ini]
	[db/folder]
	id | name   | parent | type | data
	----------------------------------
	0   news     parent   type   ...

ПРИМЕРЫ:

	[templates/default/settings.ini]
	[db/templates]
	id | name   | parent | type | data
	----------------------------------
	0   settings default  ...    ...

	[templates/default/seo.ini]
	[db/templates]
	id | name   | parent | type | data
	----------------------------------
	0   seo      default  ...    ...

	[templates/default/lang/ru.ini]
	[db/templates]
	id | name   | parent | type | data
	----------------------------------
	0   ru       default  lang   ...

	[templates/default/lang/ru.common.ini]
	[db/templates]
	id | name   | parent | type | data
	----------------------------------
	0   ru       default  common ...

	[modules/articles/data/news.ini]
	[db/modules]
	id | name   | parent | type | data
	----------------------------------
	0   news     articles data   ...

	[modules/articles/settings.ini]
	[db/modules]
	id | name   | parent | type | data
	----------------------------------
	0   settings articles ...    ...

	[articles/news/01.ini]
	[db/articles]
	id | name   | parent | type | data
	----------------------------------
	0   01       news     ...    ...

	[languages/ru.common.ini]
	[db/languages]
	id | name   | parent | type | data
	----------------------------------
	0   ru       ...      common ...

	[languages/ru.ini]
	[db/languages]
	id | name   | parent | type | data
	----------------------------------
	0   ru       ...      ...    ...

Если файл имеет впереди ЧИСЛОВОЙ ИНДЕКС, то он назначает id:

	[folder/01.name.type.ini]
	[db/folder]
	id | name   | parent | type | data
	----------------------------------
	1   name     null     type   ...
	
Если имя файла целиком содержит ЧИСЛОВОЙ ИНДЕКС, то он дублируется и в название, и в id:

	[folder/01.ini]
	[db/folder]
	id | name   | parent | type | data
	----------------------------------
	1   01       null     null   ...

ЧИСЛОВОЙ ИНДЕКС в id всегда преобразуется в целое число:

	1 > 1, 01 > 1, 001 > 1 и т.д.

АДМИНИСТРАТОР:

	[administrator/structure.ini]
	{
		"home",
		"about" : {
			"news|article",
			"faq|article",
			"conditions|url" : "/documents/conditions/"
		},
		"documents" : {
			"conditions",
			"privacypolicy",
			"useragreement"
		},
		"contacts"
	}
	[db/structure]
	id | name        | parent  | type  | data
	----------------------------------------------------------
	0   home          null      null    null
	1   about         null      null    null
	2   news          about     article null
	3   faq           about     article null
	4   conditions    about     url     /documents/conditions/
	5   documents     null      null    null
	6   conditions    documents null    null
	7   privacypolicy documents null    null
	8   useragreement documents null    null
	9   contacts      null      null    null

	[administrator/administrator|personal|private.ini]
	{
		"administrator",
		"langedit",
		"filemanager",
		"sitemap",
		"robots"
	}
	[db/administrator|personal|private]
	id | name        | parent  | type  | data
	----------------------------------------------------------
	0   administrator null      null    null
	1   langedit      null      null    null
	2   filemanager   null      null    null
	3   sitemap       null      null    null
	4   robots        null      null    null

	[administrator/languages.ini]
	{
		"langs" : {
			"ru" : ["ru", "be", "uk", "ky", "ab", "mo", "et", "lv"],
			"en" : ["en", "de"]
		},
		"codes" : {
			"ru" : "ru_RU",
			"en" : "en_US"
		}
	}
	[db/languages]
	id | name        | parent  | type  | data
	----------------------------------------------------------
	0   ru            null      langs   ["ru","be","uk","ky","ab","mo","et","lv"]
	1   en            null      langs   ["en","de"]
	2   ru            null      codes   ru_RU
	3   en            null      codes   en_US

	[administrator/functions.ini]
	[
		"custom"
	]
	[db/functions]
	id | name        | parent  | type  | data
	----------------------------------------------------------
	0   custom        null      null    null

	[administrator/processor.ini]
	{
		"administrator" : ["settings", "language"],
		"user" : ["restore", "activation", "deactivation", "authorisation", "registration", "cookiesagree"],
		"forms" : ["logout", "editprofile", "changeavatar", "deleteavatar"],
		"projects" : ["createproject", "deleteproject", "openproject", "closeproject", "lockproject"],
		"editor" : ["savecard", "updatecard", "searchcard", "refreshcard", "saveboard"],
		"payment" : ["payment"]
	}
	[db/processor]
	id | name        | parent  | type  | data
	----------------------------------------------------------
	0   administrator null      null    ["settings", "language"]
	1   user          null      null    ["restore", "activation", "deactivation", "authorisation", "registration", "cookiesagree"]
	2   forms         null      null    ["logout", "editprofile", "changeavatar", "deleteavatar"]
	3   projects      null      null    ["createproject", "deleteproject", "openproject", "closeproject", "lockproject"]
	4   editor        null      null    ["savecard", "updatecard", "searchcard", "refreshcard", "saveboard"]
	5   payment       null      null    ["payment"]

	[administrator/userstable.ini]
	{
		"id" : {
			"secure" : true,
			"readonly" : true
		},
		"login" : {
			"type" : "",
			"validation" : "",
			"unique" : true,
			"required" : true,
			"authorise" : true,
			"secure" : true,
			"crypt" : false,
			"readonly" : true
		},
		"password" : {
			"secure" : true,
			"crypt" : "password"
		},
		"status" : {
			"secure" : true
		},
		"data" : {
		},
		"email" : {
		},
		"phone" : {
			"type" : "numeric",
			"validation" : "email",
			"unique" : true,
			"required" : false,
			"authorise" : true,
			"secure" : false,
			"crypt" : true,
			"readonly" : false
		},
		"birthday" : {
			"type" : "date",
			"validation" : "date",
			"unique" : false,
			"required" : false,
			"authorise" : false,
			"secure" : false,
			"crypt" : false,
			"readonly" : false
		},
		"register" : {
			"type" : "date",
			"validation" : "email",
			"unique" : false,
			"required" : false,
			"authorise" : false,
			"secure" : false,
			"crypt" : false,
			"readonly" : false
		},
		"lastvisit" : {
			"type" : "date",
			"validation" : "email",
			"unique" : false,
			"required" : false,
			"authorise" : false,
			"secure" : false,
			"crypt" : false,
			"readonly" : true
		}
	}
	[db/userstable]
	id | name        | parent  | type  | data
	----------------------------------------------------------
	0   id            null      null    {"secure":true,"readonly":true}
	1   login         null      null    {"type":"","validation":"","unique":true,"required":true,"authorise":true,"secure":true,"crypt":false,"readonly":true}
	2   password      null      null    {"secure":true,"crypt":"password"}
	3   status        null      null    {"secure":true}
	4   data          null      null    {}
	5   email         null      null    {}
	6   phone         null      null    {"type":"numeric","validation":"email","unique":true,"required":false,"authorise":true,"secure":false,"crypt":true,"readonly":false}
	7   birthday      null      null    {"type":"date","validation":"date","unique":false,"required":false,"authorise":false,"secure":false,"crypt":false,"readonly":false}
	8   register      null      null    {"type":"date","validation":"email","unique":false,"required":false,"authorise":false,"secure":false,"crypt":false,"readonly":false}
	9   lastvisit     null      null    {"type":"date","validation":"email","unique":false,"required":false,"authorise":false,"secure":false,"crypt":false,"readonly":true}

	[administrator/users.csv]
	id,login,password,status,register,data,email,phone,birthday,lastvisit
	1549969549005126,lirasitemaster,$2y$10$dfV6Yp8RS35Sq9Yh3gCHyeCZkAmWzyptj.PjWsR0mVhSEfzpb6u76,100,,,lirasitemaster@yandex.ru,,,
	1549969569008193,admin,$2y$10$blgS4VJypGq4QMrkFFQaZ.Btnk9ushGDa1Sit43Pp4OMnR73g1a/q,100,,,admin@mail.com,,,
	1549969619001121,user,$2y$10$ObdUWuLuFP/4rXjVCvNj8efclRi730Xaz4Tl.TB52Y/Ko2jx76uNy,,,,user@mail.com,,,
	[db/users]
	id | name           | parent  | type  | data
	----------------------------------------------------------
	0   1549969549005126 null      null    {"id":"1549969549005126","login":"lirasitemaster","password":"$2y$10$dfV6Yp8RS35Sq9Yh3gCHyeCZkAmWzyptj.PjWsR0mVhSEfzpb6u76","status":"100","register":"","data":"","email":"lirasitemaster@yandex.ru","phone":"","birthday":"","lastvisit":""}
	1   1549969569008193 null      null    {"id":"1549969569008193","login":"admin","password":"$2y$10$blgS4VJypGq4QMrkFFQaZ.Btnk9ushGDa1Sit43Pp4OMnR73g1a/q","status":"100","register":"","data":"","email":"admin@mail.com","phone":"","birthday":"","lastvisit":""}
	2   1549969619001121 null      null    {"id":"1549969619001121","login":"user","password":"$2y$10$ObdUWuLuFP/4rXjVCvNj8efclRi730Xaz4Tl.TB52Y/Ko2jx76uNy","status":"","register":"","data":"","email":"user@mail.com","phone":"","birthday":"","lastvisit":""}

	[administrator/libraries.ini]
	{
		"bootstrap" : {
			"css" : "css/bootstrap.min.css",
			"css_cdn" : "https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css",
			"js" : "js/bootstrap.bundle.min.js",
			"js_cdn" : "https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.bundle.min.js"
		},
		"less" : {
			"code" : "lessc.inc.php"
		},
		"datepicker" : {
			"css" : "dist/css/bootstrap-datepicker.min.css",
			"js" : "dist/js/bootstrap-datepicker.min.js",
			"js_lang" : "dist/locales/bootstrap-datepicker.{lang}.min.js"
		}
	}
	[db/libraries]
	id | name        | parent  | type  | data
	----------------------------------------------------------
	0   bootstrap     null      null    {"css":"css/bootstrap.min.css","css_cdn":"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css","js":"js/bootstrap.bundle.min.js","js_cdn":"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.bundle.min.js"}
	1   less          null      null    {"code":"lessc.inc.php"}
	2   datepicker    null      null    {"css":"dist/css/bootstrap-datepicker.min.css","js":"dist/js/bootstrap-datepicker.min.js","js_lang":"dist/locales/bootstrap-datepicker.{lang}.min.js"}

	[administrator/configuration.ini]
	{
		"db" : {
			"type" : "nodb",
			"host" : "localhost",
			"user" : "root",
			"pass" : "",
			"name" : "site_db",
			"prefix" : "is"
		},		
		"name" : {
			"administrator" : "administrator",
			"articles" : "articles",
			"cache" : "cache",
			"core" : "includes",
			"install" : "install",
			"libraries" : "libraries",
			"modules" : "modules",
			"templates" : "templates",
			"public" : "media"
		},
		"path" : {
			"administrator" : "/",
			"articles" : "/",
			"cache" : "/",
			"core" : "/",
			"install" : "/",
			"libraries" : "/",
			"modules" : "/",
			"templates" : "/",
			"public" : "/"
		},
		"templates" : {
			"base" : "base",
			"default" : "default",
			"errors" : "errors",
			"restore" : "restore"
		},
		"language" : "ru",
		"secure" : "default",
		
		
	}
	[db/libraries]
	id | name        | parent  | type  | data
	----------------------------------------------------------
	0   bootstrap     null      null    {"css":"css/bootstrap.min.css","css_cdn":"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css","js":"js/bootstrap.bundle.min.js","js_cdn":"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.bundle.min.js"}
	1   less          null      null    {"code":"lessc.inc.php"}
	2   datepicker    null      null    {"css":"dist/css/bootstrap-datepicker.min.css","js":"dist/js/bootstrap-datepicker.min.js","js_lang":"dist/locales/bootstrap-datepicker.{lang}.min.js"}

# Проверка

Проверка существования данных или положительного результата осуществляется через функцию dataset(), которая проверяет присутствие данных и возвращает true/false.

Она заменяет в большинстве случаев вызов isset() и !empty(), плюс многочисленные проверки вида:

if (empty($x) || $x === 0 || $x === '0')
if (!empty($x) && is_array($x) && reset($x))

и так далее. Подробнее см. в описании функции.

Вызов:

> if (dataset($x))

Проверка данных на соответствие массиву осуществляется через функцию dataarray().

Она заменяет в большинстве случаев проверки и конвертации вида:

if (is_array($x) || is_object($x))
if (is_object($x)) { $x = (array) $x; }

Вызов:

> if (dataarray($x))
> if (dataarray($x)) { $x = dataarray($x, true); }

# Ограничения

Структура не должна содержать элементы с одинаковыми названиями, даже если они находятся в разной вложенности:

	[х] нельзя              [v] можно
	...                     ...
	"group_one" : {         "group_one" : {
		"item"                  "item_one"
	},                      },
	"group_two" : {         "group_two" : {
		"item"                  "item_two"
	},                      },
	...                     ...

# Вывод данных

Вызов данных, в том числе языковых, должен происходить через функцию dataprint().

	! ТОГДА И ТОЛЬКО ТОГДА выведенные данные будут БЕЗОПАСНЫ

Через эту функцию можно также выводить языковые переменные.

Подробный режим работы функции пока не установлен.

# Формат путей для файлов и папок

Для обозначения путей существует системный объект $uri который содержит всю информацию о запрошенном пути к сайту, а также производные от него, используемые в других системных объектах.

Структура $uri такая:

	{
		scheme
		// схема запроса
		// http, https
		
		host
		// хост или адрес сайта
		// может быть как с www, так и без
		
		path : {
			string
			// путь в виде строки
			
			array
			// путь в виде массива из папок
			
			file
			// файл, если был запрошен какой-нибудь файл
		}
		
		query : {
			string
			// запрос в виде строки
			
			array
			// запрос в виде массива, где ключи - имена полей запроса, а значения - данные полей запроса
		}

		www
		// служебный триггер
		// false - если хост сайта без www, true - если хост сайта с www
		
		url
		// полная строка запроса
		// может отличаться от изначального запроса, т.к. была разбита на части, прошла обработку и была собрана заново
	}

Еще есть константы NAME_FOLDER, PATH_FOLDER и URL_FOLDER, которые соответствуют всем системным папкам.

Например для системной папки с кэшем (FOLDER cache) эти константы будут такими:

	NAME_CACHE = cache
	PATH_CACHE = \server\site\cache
	URL_CACHE  = /cache/

Формат путей для папок ВСЕГДА должен ЗАКАНЧИВАТЬСЯ закрывающим слешем:

	/ для url-ссылок
	DS для файловой системы внутри php-файлов

DS - это синоним константы DIRECTORY_SEPARATOR, которая автоматически определяет слеш в файловой системе - / или \

Формат путей для папок и файлов НИКОГДА не должен НАЧИНАТЬСЯ со слеша.

	folder\      - единственный правильный формат
	folder       - неправильно
	\folder      - неправильно
	\folder\     - неправильно
	folder.php   - неправильно
	\folder.php  - неправильно
	\folder.php\ - неправильно
	folder.php\  - неправильно

Формат путей должен НАЧИНАТЬСЯ со слеша только в КОНСТАНТАХ ПУТЕЙ:

	URL_FOLDER = \folder\

Таким образом, любой вызов будет записан следующим образом:

	$subfolder . $folder . $file
	PATH_FOLDER . $another_folder . $file
	URL_FOLDER . $another_folder . $file

НЕДОПУСТИМО использовать такие записи:

	$subfolder . '\' . $folder . '\' . $file
	PATH_FOLDER . DS . $another_folder . DS . $file
	URL_FOLDER . '/' . $another_folder . '/' . $file

потому что они могут привести к путям в таких форматах:

	subfolder/\folder/\file
	PATH_FOLDER\\another_folder\\file
	/URL_FOLDER//another_folder//file

Имя сайта НЕЛЬЗЯ использовать вместе с PATH_FOLDER, но МОЖНО с URL_FOLDER, при этом будьте внимательными, чтобы не получилась запись с двумя слешами:

	'http://site.com' . PATH_FOLDER . another_folder даст http://site.com/\server\site\another_folder/ неправильно
	'http://site.com/' . URL_FOLDER . another_folder даст http://site.com//URL_FOLDER/another_folder/  неправильно
	'http://site.com' . URL_FOLDER . another_folder  даст http://site.com/URL_FOLDER/another_folder/   единственный правильный формат

# Формат URL

Токены: https://habr.com/ru/post/318748/

https://habr.com/ru/company/yandex/blog/265569/

1. URL идентифицирует ресурс — некоторую разделяемую сущность. Файл — ресурс. Ручка, которая что-то ищет — ресурс. Вызов метода — не ресурс.
Если вы хотите шарахнуть из пушки по Луне, то вот так делать не надо:

	GET /?method=шарахнуть&to=Луна

Заведите ресурс «шарахалка», и тогда у вас всё будет логично:

	POST /шарахалка/?to=Луна

2. URL состоит из схемы (протокола), хоста, пути (path), запроса (query) и фрагмента.
Путь используется для организации иерархических ресурсов.
Запрос — для неиерархических ресурсов и для параметров операции.
Фрагмент идентифицирует подчинённый ресурс, не имеющий прямого URL.

Scheme      Host                 Path               Query      Fragment
  ↓           ↓                    ↓                  ↓            ↓
http://nyashnye-kotiki.xxx/breeds/maine-coon/?deliver_to=Moscow#photo

Если на вашем сайте «Няшные котики» есть каталог по породам,
то его вполне логично организовать в виде частей path,
поскольку каждый котик принадлежит ровно к одной породе.

А вот доставлять одного котика можно в несколько городов,
поэтому фильтр «с доставкой в город N» следует организовать через query.

3. Обращение по HTTP состоит из применения метода (глагола) к URL.
Результатом такого применения должно быть — сюрприз-сюрприз! — то, что в глаголе написано.
То есть GET возвращает представление ресурса, DELETE удаляет и т.п.

4. Методы GET, HEAD, OPTIONS — безопасные. Предполагается, что вызов этих методов состояния ресурса не изменяет.
Поэтому многие сетевые агенты — такие, например, как префетчер ссылок в браузере или мессенджере —
считают себя вправе по таким ссылкам ходить без явного волеизъявления пользователя. ИЧСХ, никаких стандартов не нарушают.

5. По умолчанию методы GET и HEAD кэшируются, OPTIONS, POST, PUT, PATCH, DELETE — нет.
Поэтому если вы шарахнули по Луне методом POST, вы можете быть (почти) уверены, что этот запрос выполнится.
Если вы шарахаете методом GET, какой-нибудь промежуточный прокси может ВНЕЗАПНО отдать вам ответ из кэша, и шарах в реальности не произойдёт.

